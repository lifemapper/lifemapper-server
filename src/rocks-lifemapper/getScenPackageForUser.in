#!/bin/bash
#
# This script downloads a scenario data package, containing a scenario metadata, 
# and raster files. It uncompresses and places data in the correct directory,
# and transforms data into mxe format for Maxent modeling.
#
# The functions in this script are also included in getBoomPackageForUser
#
# The script can be run at any time to download and install environmental data.

usage () 
{
    echo "Usage: $0 <SCEN_PACKAGE_NAME>  <USER_ID>"
    echo "   "
    echo "This script is run on an existing lifemapper-server installation. "
    echo "It will:"
    echo "     - download the BOOM_PACKAGE_NAME data into the "
    echo "       @LMSCRATCHDISK@/temp directory, then install environmental"
    echo "       data into the @DATADIR_SHARED@/@ENV_DATA_DIR@ directory, and"
    echo "       species data into the @DATADIR_SHARED@/archive/<user> directory"
    echo "   "
    echo "The script can be run at any time to download and install data for"
    echo "a BOOM run."
    echo "   "
}

set_defaults() {
    /bin/egrep -i "^lmwriter" /etc/passwd
    if [ $? -ne 0 ]; then
	    echo "Error: user lmwriter does not exist" | tee -a $LOG
        exit 1
    fi

    SCEN_PKG=$1
    USR=$2
    LMURL=@LMURL@
    THISNAME=`/bin/basename $0`
    
	# load opt-python and environment
    source /usr/share/Modules/init/bash
    module load opt-python
    . /etc/profile.d/lifemapper.sh
    TRANSFORMPY=@LMHOME@/LmBackend/tools/convert_layers_in_package.py
    SCENCAT_PY=@LMHOME@/LmDbServer/tools/catalog_scen_package.py

    LOG=@LMSCRATCHDISK@/log/$THISNAME.log
    # Append to existing logfile
    touch $LOG
    
    TEMP_DIR=@LMSCRATCHDISK@/temp

    # config files
    CONFIG_FILE=@LMHOME@/config/config.lmserver.ini
    SITE_CONFIG_FILE=@LMHOME@/config/config.site.ini    
    # Find PUBLIC_USER
    if [ -f $SITE_CONFIG_FILE ] ; then        
        echo "Find PUBLIC_USER in site config file" >> $LOG
        PUBLIC_USER=`grep -i ^PUBLIC_USER $SITE_CONFIG_FILE |  awk '{print $2}'`
    fi
    if [ -z ${PUBLIC_USER} ] ; then 
        echo "Find PUBLIC_USER in installed config file" >> $LOG
        PUBLIC_USER=`grep -i ^PUBLIC_USER $CONFIG_FILE | awk '{print $2}'`
    else
        echo "Found PUBLIC_USER in site config file" >> $LOG
    fi

    if [ -z ${PUBLIC_USER} ] ; then
        echo "Error: Missing configured value for PUBLIC_USER" >> $LOG
        exit 1
    else
        echo "Found PUBLIC_USER in installed config file" >> $LOG
    fi

    # *_PKG variables are file basenames, no path or file extension
    echo "Scenario package: $SCEN_PKG, Scenario User: $USR" | tee -a $LOG
    USER_DIR=@DATADIR_SHARED@/archive/$USR

    # If missing or public user, install data for all users
    if [ -z ${USR} || $USR = $PUBLIC_USER ] ; then
        SCEN_DIR=@DATADIR_SHARED@/@ENV_DATA_DIR@
    else
        SCEN_DIR=$USER_DIR
    fi
    
    SCEN_META_FILE=$SCEN_DIR/$SCEN_PKG.py
    SCEN_PKG_FILE=$SCEN_PKG.@TARBALL_POSTFIX@

    TMP_SPFILE=$TEMP_DIR/$SCEN_PKG_FILE
}

### Retrieve scenario data named in SCENARIO_PACKAGE into temp dir
pull_scenario_data () {
    # find metadata file pkgname.py
    if [ -f $SCEN_META_FILE ]; then
        echo "Scenario metadata $SCEN_META_FILE already present" | tee -a $LOG
    else  
        echo "Fetch scenario $TMP_SPFILE" | tee -a $LOG
        curl -L "$LMURL/$SCEN_PKG_FILE" -o $TMP_SPFILE
    fi
}

### Create USER directory 
create_user_dir () {
	 # Find or create the test Boom data directory
    if [ -d $USER_DIR ]; then
        echo "USER data directory $USER_DIR already exists" | tee -a $LOG
    else 
        echo "Create data directory $USER_DIR" | tee -a $LOG
        /bin/mkdir $USER_DIR 
	    if [ -d $USER_DIR ]; then
	        /bin/chgrp -R lmwriter $USER_DIR
	        /bin/chmod -R g+ws     $USER_DIR
	    fi
    fi
}

### Retrieve scenario data named in SCENARIO_PACKAGE
move_scenario_data () {
    # find metadata file pkgname.py
    if [ -f $SCEN_META_FILE ]; then
        echo "Scenario metadata $SCEN_META_FILE already present" | tee -a $LOG
    else  
        # uncompress 
        if [ -f $TMP_SPFILE ]; then
		    echo "Uncompress $TMP_SPFILE into $SCEN_DIR"   | tee -a $LOG
            tar xzf $TMP_SPFILE -C $SCEN_DIR/
		    
		    echo "Remove $TMP_SPFILE"   | tee -a $LOG
            rm -f $TMP_SPFILE
            
		    echo "Reset group and write permission on $SCEN_DIR"   | tee -a $LOG
		    /bin/chgrp -R lmwriter $SCEN_DIR
		    /bin/chmod -R g+ws     $SCEN_DIR
        else
            echo "Failed to find $TMP_SPFILE ..." | tee -a $LOG
        fi

    fi
}


### Create ASCII and MXE layers from TIFFs
transform_layers () {
    # Todo: Find alternate top directory name for this package
    NEW_LYR_PATH=$SCEN_DIR/$SCEN_PKG    
    if [ -d $NEW_LYR_PATH ]; then
        if [ -f $TRANSFORMPY ] ; then
            echo "Convert layers in $NEW_LYR_PATH for $SCEN_PKG to ascii and mxe ..." | tee -a $LOG
            @PYBIN@ $TRANSFORMPY $NEW_LYR_PATH 2>&1 | tee -a $LOG
        else
            echo "Error: Missing file $TRANSFORMPY" | tee -a $LOG
            exit 1
        fi
    else 
        echo "Directory $NEW_LYR_PATH does not exist" | tee -a $LOG
        echo "Run $TRANSFORMPY on directory with new layers" | tee -a $LOG
    fi
}

### Catalog scenarios in the database for this user
catalog_scenarios () {
    if [ -f $SCEN_META_FILE ]; then
        if [ -f $SCENCAT_PY ] ; then
            echo "Catalog scenario data in $SCEN_META_FILE for $USR ..." | tee -a $LOG
            @PYBIN@ $SCENCAT_PY $USR $SCEN_META_FILE 2>&1 | tee -a $LOG
        else
            echo "Error: Missing file $SCENCAT_PY" | tee -a $LOG
            exit 1
        fi
    else 
        echo "File $SCEN_META_FILE does not exist" | tee -a $LOG
        echo "Find $SCEN_META_FILE to run $SCENCAT_PY $USR $SCEN_META_FILE" | tee -a $LOG
    fi
}

instruct_user () {
    echo ""   | tee -a $LOG
    echo "*****************"   | tee -a $LOG
    echo "This script installed data in $SCEN_PKG for any user"   | tee -a $LOG
#     echo "This script installed data in $SCEN_PKG for User $USR"   | tee -a $LOG
    echo "*****************"   | tee -a $LOG
}

TimeStamp () {
    echo $1 `/bin/date` >> $LOG
}

####### Main #######
if [ $# -ne 2 ]; then
    usage
    exit 0
fi 

# 1=scen_package 2=user
set_defaults $1 $2
TimeStamp "# Start"

pull_scenario_data
create_user_dir
move_scenario_data
catalog_scenarios
transform_layers
instruct_user

TimeStamp "# End"
