#!/bin/bash 
#
# Update @LMHOME@/config/config.lmserver.ini file with correct ip info  
#


usage () 
{
    echo "Usage: $0"
    echo "This script updates IPs in @LMHOME@/config/config.lmserver.ini file "
    echo "from the values set in rocks attributes LM_dbserver and LM_webserver."
    echo "If attributes are not set then the server public IP is used"
    echo "It also updates Makeflow and Work Queue options from the hardware"
    echo "configuration on this server"

}

set_defaults() {
	CONF_DIR=@LMHOME@/config
	APACHE_CONF_DIR=/etc/httpd/conf.d
    THISNAME=`/bin/basename $0`
    LOG=@LMSCRATCHDISK@/log/$THISNAME.log
    rm -f $LOG
    touch $LOG
}

getMakeflowParams () {
    cpuTotal=0
    nodecpus=`/opt/rocks/bin/rocks list host | grep Compute | awk '{print $3}'`
    for c in $nodecpus;
    do  
        echo 'next: c is' $c >> $LOG
        cpuTotal=$(( $cpuTotal + $c ))
        echo '  cpuTotal is' $cpuTotal >> $LOG
    done
    if [ $cpuTotal = 0 ]; then
        nodecount=`/opt/rocks/bin/rocks list host | grep Compute | wc -l`
        node1cpus=`/opt/rocks/bin/rocks list host | grep Compute | awk '{print $3}' | sed -n '1 p'`
        cpuTotal=$(( $nodecount * $node1cpus ))
        echo 'Alt method found:'
        echo '$nodecount nodes, $nodecpus cpus on node 1, total cpus $cpuTotal' >> $LOG
    fi
    MaxWorkers=$cpuTotal
    tmpMaxMFs=$(( $cpuTotal / 10 ))
    MaxMakeflows=$(($tmpMaxMFs>2?$tmpMaxMFs:2))
    echo '  MaxWorkers, MaxMakeflows =' $MaxWorkers $MaxMakeflows >> $LOG
}

getWorkerOptions () {
    node1cpus=`/opt/rocks/bin/rocks list host | grep Compute | awk '{print $3}' | sed -n '1 p'`
    node1Mb=`/opt/rocks/bin/rocks run host "df -m" | grep partition1 | awk '{print $4}' | sed -n '1 p'`
    
    cacheLimit=$(( ( $node1Mb * 8 ) / 10 ))
    cacheLimitPerWorker=$(( $cacheLimit / $node1cpus ))
    WorkerOptions=`echo --disk=$cacheLimitPerWorker`
    echo '  node1Mb, cacheLimit, cacheLimitPerWorker =' $node1Mb $cacheLimit $cacheLimitPerWorker >> $LOG
}

getAddress () {
    # public host address
    Addr=`/opt/rocks/bin/rocks list host attr localhost | grep Kickstart_PublicFQDN | awk '{print $3}'`

    # check if we are on EC2
    x=$(curl -s -f http://169.254.169.254/latest/meta-data/local-ipv4 2> /dev/null)
    if [ "$?" == "0" ] ; then
        echo "INFO: This is EC2 host, using public IP in place of FQDN"
        Addr=$x
    fi

    # check for attribute for lifemapper dbserver 
    AddrDbserver=`/opt/rocks/bin/rocks list host attr localhost | grep LM_dbserver | awk '{print $3}'`
    if [ "$AddrDbserver" = "true" ] || [ "$AddrDbserver" = "" ] ; then
        AddrDbserver=$Addr
    fi

    # check for attribute for lifemapper webserver 
    AddrWebserver=`/opt/rocks/bin/rocks list host attr localhost | grep LM_webserver | awk '{print $3}'`
    if [ "$AddrWebserver" = "true" ] ||  [ "$AddrWebserver" = "" ] ; then
        AddrWebserver=$Addr
    fi
}

updateConfigVars () {
    infile=@LMHOME@/LmServer/config/config.lmserver.ini.in
    outfile=@LMHOME@/config/config.lmserver.ini
    
    if [ -f $outfile ] ; then
        bakext=`/bin/date +%F`
        echo '  File ' $outfile ' exists, saving to ' $outfile.$bakext  >> $LOG
        mv -f $outfile $outfile.$bakext
    fi
    
    echo '  Creating ' $outfile ' from ' $infile >> $LOG
    # replace variables
    sed  "s%@PUBLIC_FQDN@%$Addr%g; \
          s%@WEB_FQDN@%$AddrWebserver%g; \
          s%@DB_FQDN@%$AddrDbserver%g; \
          s%@MAX_MAKEFLOWS@%$MaxMakeflows%g; \
          s%@MAX_WORKERS@%$MaxWorkers%g; \
          s%@EXTRA_WORKER_OPTIONS@%$WorkerOptions%g" $infile > $outfile
}

update_config () {
    fname=$1
    
    bakext=`/bin/date +%F`
    backf=$fname.$bakext
    
    if [[ -f $fname ]] ; then 
	echo '  Saving to ' $fname.$bakext  >> $LOG
        mv -f $fname  $fname.$bakext

	echo '  Creating ' $outfile ' from ' $fname >> $LOG
	sed $SEDSPEC  $fname.$bakext  >  $fname
    else
	echo '  Missing input ' $$fname  >> $LOG
    fi
}


get_sedspec () {
    # public host address
    # Addr=`/opt/rocks/bin/rocks list host attr localhost | grep Kickstart_PublicFQDN | awk '{print $3}'`
    # IPAddr=`/usr/sbin/ifconfig eth1 | grep inet | grep broadcast  | awk '{print $2}'`
    HOSTNAME=`/usr/bin/hostname`
    CERTFILE=/etc/letsencrypt/live/$HOSTNAME/fullchain.pem
    CERTKEYFILE=/etc/letsencrypt/live/$HOSTNAME/privkey.pem
    SSL_OPTIONS_FILE=/etc/letsencrypt/options-ssl-apache.conf
    CHAIN_FILE=/etc/letsencrypt/live/$HOSTNAME/chain.pem
    SEDSPEC='-e s%@FQDN@%'$HOSTNAME'%g \
             -e s%@CERTFILE@%'$CERTFILE'%g \
             -e s%@CERTKEYFILE@%'$CERTKEYFILE'%g  \
             -e s%@SSL_OPTIONS_FILE@%'$SSL_OPTIONS_FILE'%g \
             -e s%@CHAIN_FILE@%'$CHAIN_FILE'%g \
             -e s%@PUBLIC_FQDN@%'$Addr'%g \
             -e s%@WEB_FQDN@%'$AddrWebserver'%g \
             -e s%@DB_FQDN@%'$AddrDbserver'%g \
             -e s%@MAX_MAKEFLOWS@%'$MaxMakeflows'%g \
             -e s%@MAX_WORKERS@%'$MaxWorkers'%g \
             -e s%@EXTRA_WORKER_OPTIONS@%'$WorkerOptions'%g'
}


updateWebhost () {
    infile=@DATADIR_SERVER@/sdm/elm.js.in
    outfile=@DATADIR_SERVER@/sdm/elm.js
    
    if [ -f $outfile ] ; then
        rm -f $outfile
    fi
    
    if [ -f $infile ] ; then    
        echo '  Creating ' $outfile ' from ' $infile >> $LOG
        # replace variables
        sed  "s%@PUBLIC_FQDN@%$AddrWebserver%g" $infile > $outfile
    else
        echo '  Missing input file ' $infile >> $LOG
    fi
}

# update permissions on config files
updatePerms () {
    GID=`grep lmwriter: /etc/group`
    if [ "$GID" != "" ] ; then
        chgrp  lmwriter /opt/lifemapper/config/config*.ini*
        chmod  664      /opt/lifemapper/config/config*.ini*
    fi
}

#### Main ####

if [ $# -ne 0 ]; then
    usage
    exit 0
fi 

set_defaults
echo "# Start" `/bin/date` >> $LOG
getAddress
## updateWebhost
getMakeflowParams
getWorkerOptions
# updateConfigVars

get_sedspec
update_config  $CONF_DIR/config.lmserver.ini
update_config  $APACHE_CONF_DIR/lifemapper-apache.conf

updatePerms
echo "# End" `/bin/date` >> $LOG
