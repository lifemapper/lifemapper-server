#!/bin/bash 

# Purpose: define a BOOM archive and populate the database with input metadata
#
# This script is run by a superuser

usage () 
{
    echo "Usage: $0 <BOOM params filename>"
    echo "This script is run by the superuser. It will "
    echo "     - run init_workflow.py to populate the databases with "
    echo "       BOOM inputs from the provided parameters file and the default"
    echo "       configuration"
    echo "   "
    echo "Logging in @LMSCRATCHDISK@/log/`/bin/basename $0`.log"
    # psql -U admin -d borg -c "COPY (select * from lm_v3.taxon where taxonomysourceid = 1) 
    # TO STDOUT WITH CSV HEADER" > /tmp/taxon.csv
}

if [ $# -ne 1 ]; then
    usage
    exit 0
fi 

### define varibles
SetDefaults () {
    INIT_CONFIG=$1

    /bin/egrep -i "^lmwriter" /etc/passwd
    if [ $? -ne 0 ]; then
        echo "Error: user lmwriter does not exist" | tee -a $LOG
        exit 1
    fi

    # config files
    CONFIG_FILE=@LMHOME@/config/config.lmserver.ini
    SITE_CONFIG_FILE=@LMHOME@/config/config.site.ini

    # python
    source /usr/share/Modules/init/bash
    module load opt-python
	. /etc/profile.d/lifemapper.sh
    BOOMCAT_PY=@LMHOME@/LmDbServer/boom/init_workflow.py

    THISNAME=`/bin/basename $0`
    LOG=@LMSCRATCHDISK@/log/$THISNAME.log
    touch $LOG

    # NOTE: These commands pull values from ini files in format KEY: VALUE
    #       but fail on KEY = VALUE (written by the python ConfigParser)
    if [ -f $INIT_CONFIG ] ; then
        echo "Looking for DATASOURCE, ARCHIVE_USER, TREE in user config file $INIT_CONFIG"   | tee -a $LOG  
        DATA_SOURCE=`grep -i DATA_SOURCE $INIT_CONFIG | grep -v ';' | awk '{print $2}'`
        ARCHIVE_USER=`grep -i ARCHIVE_USER $INIT_CONFIG | grep -iv _EMAIL | grep -v ';' | awk '{print $2}'`
        SCEN_PKG=`grep -i SCENARIO_PACKAGE $INIT_CONFIG | grep -v ';' | awk '{print $2}'`
        ARCHIVE_NAME=`grep -i ARCHIVE_NAME $INIT_CONFIG | grep -v ';' | awk '{print $2}'`
    fi

    if [ ! "$ARCHIVE_USER" ] ; then
        echo "Error: Missing value for ARCHIVE_USER" | tee -a $LOG
        exit 1
    fi
    if [ ! "$ARCHIVE_NAME" ] ; then
        echo "Error: Missing value for ARCHIVE_NAME" | tee -a $LOG
        exit 1
    fi
    if [ ! "$DATA_SOURCE" ] ; then
        echo "Error: Missing value for DATA_SOURCE" | tee -a $LOG
        exit 1
    fi
    if [ ! "$SCEN_PKG" ] ; then
        echo "Error: Missing value for SCENARIO_PACKAGE" | tee -a $LOG
        exit 1
    fi
        
    # TODO: get epsg from metadata
    #EPSG=`grep -i epsg $SCEN_PKG_META | awk '{print $2}'`
    EPSG=4326
    ARCHIVE_USER_DATA_DIR=@DATADIR_SHARED@/archive/$ARCHIVE_USER    
    LAYER_DIR=$ARCHIVE_USER_DATA_DIR/$EPSG
    MF_DIR=$ARCHIVE_USER_DATA_DIR/makeflow
    SCEN_PKG_META=@DATADIR_SHARED@/layers/$SCEN_PKG.py   
}

TimeStamp () {
    echo $1 `/bin/date` >> $LOG
}

### populate lifemapper DB with inputs for Global PAM and 
### makeflows to begin computing the BOOM workflow
PopulateBoomInputs () {
    if [ -f $BOOMCAT_PY ] ; then         
        echo "initWorkflow $INIT_CONFIG initializes data inputs " | tee -a $LOG
        echo "then inserts a makeflow to create and run tasks " | tee -a $LOG
        echo "with '$BOOMCAT_PY' ..." | tee -a $LOG
        @PYBIN@ $BOOMCAT_PY  $INIT_CONFIG  2>&1 | tee -a $LOG
        
    else
        echo "Error: Missing file $BOOMCAT_PY" | tee -a $LOG
        exit 1
        
    fi   
}


FixPermissions () {
    # This script is run by root, so set group write permission 
	# set newly written (by BOOMCAT) tree file 
  	echo 'Adding lmwriter group write permission for $ARCHIVE_USER_DATA_DIR'
    /bin/chgrp lmwriter $ARCHIVE_USER_DATA_DIR/*.*
    /bin/chmod g+w     $ARCHIVE_USER_DATA_DIR/*.*

	# Get user dir group write permission; if new it must be enabled
	# If top directory exists, do not do recursively b/c time-consuming if full 
	# of data), but handle newly written tree file 
	perm=$(stat -c %a "$ARCHIVE_USER_DATA_DIR")
	len=${#perm}
	if [[ "$len" = 3 ]]; then 
		gwperm=`echo ${perm:1:1}`
	else 
		gwperm=`echo ${perm:2:1}` 
	fi

	# If new, allow group write for user dir 
    if [[ $gwperm = 7 ]]; then 
    	echo 'Group write permission is correctly set'; 
    else 
    	echo 'Adding lmwriter group write permission for $ARCHIVE_USER_DATA_DIR'
        /bin/chgrp -R lmwriter $ARCHIVE_USER_DATA_DIR
        /bin/chmod -R g+ws     $ARCHIVE_USER_DATA_DIR
    fi
   
	# Layer and Makeflow directories may be new and will be small 
    echo "Setting lmwriter group permissions on $LAYER_DIR and $MF_DIR" | tee -a $LOG
    if [ -d $LAYER_DIR ]; then
        /bin/chgrp -R lmwriter $LAYER_DIR
        /bin/chmod -R g+ws     $LAYER_DIR
    fi
	if [ -d $MF_DIR ]; then
        /bin/chgrp -R lmwriter $MF_DIR
        /bin/chmod -R g+ws     $MF_DIR
    fi
}


### Main ###
SetDefaults $1
TimeStamp "# Start"

PopulateBoomInputs

FixPermissions
TimeStamp "# End"
