#!/bin/bash

# @summary: This script will start, stop, or restart the matt_daemon
usage () 
{
    echo "Usage: $0 {start|stop|restart} <debug_level>"
    echo "This script is run by lmwriter. It will start or stop the matt_daemon "
    echo "to process makeflows.  If starting, an optional argument debug_level"
    echo "of 0, 1, or 2 can be provided for the start or restart commands."
    echo "   debug_level 0: Delete all logs, makeflows, outputs"
    echo "   debug_level 1: Keep all failed logs, makeflows, outputs"
    echo "   debug_level 2: Keep all logs, makeflows, outputs"
    echo "If no debug_level is provided for start command, the defaults are "
    echo "   Delete all logs, keep failed makeflows, delete all outputs"
    echo "   "
    echo "The output of the script is in @LMSCRATCHDISK@/log/`/bin/basename $0`.log"
}

set_defaults () {
	USR=`whoami | awk '{print $1}'`
	if [[ $USR != 'lmwriter' ]]; then
		echo 'This script must be run as lmwriter user'
		exit 0
	fi

	debug_level=$1
    if [[ $debug_level -ge 0 ]] && [[ $debug_level -le 2 ]]; then 
        MATT_OPTIONS=" -dl=$debug_level -dm=$debug_level -do=$debug_level"
    else
        MATT_OPTIONS=" -dl=0 -dm=1 -do=0"
    fi
    echo "   debug_options $MATT_OPTIONS" >> $LOG

	# load opt-python and environment
    source /usr/share/Modules/init/bash
    module load opt-python
    . /etc/profile.d/lifemapper.sh
	
	MATT_DAEMON=@LMHOME@/LmServer/tools/matt_daemon.py
	PIDFILE=@LMSCRATCHDISK@/run/matt_daemon.pid
	
	# Log latest results of this cron job
	LOG=/tmp/`/bin/basename $0`.log
	rm -f $LOG
	touch $LOG
}

test_inputs () {
    cmd=$1 
    debug_level=$2
    
    if [[ $cmd == 'start' ]]; then
        if [[ -f $PIDFILE ]]; then
            echo "   matt_daemon is already running" >> $LOG
            exit 0
        else
        	echo "   start matt" >> $LOG
        fi
       
    elif [[ $cmd == 'stop' ]]; then
        if [[  -f $PIDFILE  ]]; then
        	echo "   stop matt" >> $LOG
        else
            echo "   matt_daemon is not running" >> $LOG
            exit 0
        fi
       
    elif [[ $cmd == 'restart' ]]; then
    	echo "   restart matt" >> $LOG
    	
    else
    	echo "   invalid commmand $cmd" >> $LOG
        exit 0
    fi
}    

time_stamp () {
    echo $1 `/bin/date` >> $LOG
}


# stop matt_daemon
stop_matt () {
    echo "-- stop matt_daemon " >> $LOG
    @PYBIN@ $MATT_DAEMON stop >> $LOG 2>&1
    echo "   sleep 10 min ..." >> $LOG
    /bin/sleep 600    
    echo "   done sleeping" >> $LOG
}

# restart matt_daemon
restart_matt () {
    echo "-- restart matt_daemon" >> $LOG
    if [[ -f $PIDFILE ]]; then
        stop_matt
        MATT_COUNT=`ps -Alf | grep $MATT_DAEMON | grep 'start' | wc -l`
        if [ $MATT_COUNT -eq 0 ]; then
            echo "   matt_daemon has stopped" >> $LOG
            start_matt
        else
            echo "   matt_daemon failed to stop" >> $LOG
        fi
    else
        echo "   matt_daemon is not running" >> $LOG
    fi
}

# start matt_daemon
start_matt () {	
	echo "-- start matt_daemon with debug_options = $debug_options" >> $LOG
	@PYBIN@ $MATT_DAEMON start $debug_options
}


####### Main #######

if [[ $# -lt 1 ]]; then
    usage
    exit 0
elif [[ $# -eq 1 ]]; then
    cmd=$1
    debug_level=-1
else
    cmd=$1
    debug_level=$2
fi

set_defaults $debug_level
test_inputs $cmd 

time_stamp "# Start"

if [[ $cmd == 'start' ]]; then
    start_matt
elif [[ $cmd == 'stop' ]]; then
    stop_matt
elif [[ $cmd == 'restart' ]]; then
    restart_matt
fi

time_stamp "# End"

