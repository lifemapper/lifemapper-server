#!/bin/bash 

# Purpose: define a BOOM archive and populate the database with input metadata
#
# This script is run by a superuser

usage () 
{
    echo "Usage: $0 <initialization filename>"
    echo "This script is run by the superuser. It will populate the database by running"
    echo "     - catalogDefaults.py for default users, datasources and algorithms"
    echo "     - catalogScenPkg.py for environmental scenarios for the public user"
    echo "     - initWorkflow.py to create the archive defined by the"
    echo "       provided initialization file "
    echo "   "
    echo "The output of the script is in @LMSCRATCHDISK@/log/`/bin/basename $0`.log"
}

### define varibles
set_defaults () {
    THISNAME=`/bin/basename $0`
    LOG=@LMSCRATCHDISK@/log/$THISNAME.log
    rm -f $LOG
    touch $LOG

    echo "-- enable modules"  | tee -a $LOG
    source /usr/share/Modules/init/bash
   
    # config files
    CONFIG_FILE=@LMHOME@/config/config.lmserver.ini
    SITE_CONFIG_FILE=@LMHOME@/config/config.site.ini
    BOOM_PARAMS=@LMHOME@/config/boom.public.params

    # scripts
    DEFCAT_PY=@LMHOME@/LmDbServer/tools/catalog_defaults.py    
    SCENCAT_PY=@LMHOME@/LmDbServer/tools/catalog_sen_package.py    
    BOOMCAT_PY=@LMHOME@/LmDbServer/boom/init_workflow.py

    if [ -f $BOOM_PARAMS ] ; then
        echo "Looking for DATA_SOURCE, ARCHIVE_USER, TREE in public archive config file $INIT_CONFIG"   | tee -a $LOG  
        DATA_SOURCE=`grep -i ^DATA_SOURCE $BOOM_PARAMS | awk '{print $2}'`
        ARCHIVE_USER=`grep -i ^ARCHIVE_USER $BOOM_PARAMS | awk '{print $2}'`
        ARCHIVE_NAME=`grep -i ^ARCHIVE_NAME $BOOM_PARAMS | awk '{print $2}'`
        SCEN_PKG=`grep -i ^SCENARIO_PACKAGE $BOOM_PARAMS | awk '{print $2}'`
        
        TREE_BASENAME=`grep -i ^TREE $BOOM_PARAMS | awk '{print $2}'`
        BIOGEO_HYPOTHESES=`grep -i ^BIOGEO_HYPOTHESES $BOOM_PARAMS | awk '{print $2}'`
    fi
    
    # DATA_SOURCE must be in public archive config
    if [ ! "$DATA_SOURCE" ] ; then 
        echo "Missing DATA_SOURCE in $BOOM_PARAMS"   | tee -a $LOG
        exit 1
    fi
    
    # ARCHIVE_USER should be in public archive config, 
    # otherwise use PUBLIC_USER in site or installed config
    if [ ! "$ARCHIVE_USER" ] ; then 
        # look in config.site.ini
        if [ -f $SITE_CONFIG_FILE ] ; then        
            echo "Looking for PUBLIC_USER in site config file"   | tee -a $LOG  
            ARCHIVE_USER=`grep -i ^PUBLIC_USER $SITE_CONFIG_FILE | awk '{print $2}'`
        fi
        # look in installed config file        
        if [ ! "$CONFIG_FILE_USER" ] ; then 
            echo "Looking for PUBLIC_USER in installed config file"   | tee -a $LOG  
            CONFIG_FILE_USER=`grep -i ^PUBLIC_USER $CONFIG_FILE | awk '{print $2}'`
        fi
    fi
    if [ ! "$ARCHIVE_USER" ] ; then
        echo "Error: Missing value for ARCHIVE_USER in public archive config (or PUBLIC_USER in site or installed config )" | tee -a $LOG
        exit 1
    fi
    
    # SCENARIO_PACKAGE should be in public archive config, 
    # otherwise use SCENARIO_PACKAGE in site config
    if [ ! "$SCEN_PKG" ] ; then 
        # look in config.site.ini
        if [ -f $SITE_CONFIG_FILE ] ; then        
            echo "Looking for SCENARIO_PACKAGE in site config file"   | tee -a $LOG  
            SCEN_PKG=`grep -i ^SCENARIO_PACKAGE $SITE_CONFIG_FILE | awk '{print $2}'`
        fi
    fi
    if [ ! "$SCEN_PKG" ] ; then
        echo "Error: Missing value for SCENARIO_PACKAGE in public archive config (and site config)" | tee -a $LOG
        exit 1
    fi
    
    PUBLIC_USER_DATA_DIR=@DATADIR_SHARED@/archive/$PUBLIC_USER
}

TimeStamp () {
    echo $1 `/bin/date` >> $LOG
}

cmd_opt_python () {
    cmd=$1
    echo "-- $1 opt-python"  | tee -a $LOG
    module $1 opt-python
    pver=`@PYBIN@ --version`
    echo "-- $pver"   | tee -a $LOG
}

### populate lifemapper DB with Algorithms and default metadata, no makeflow
populate_defaults () {
    if [ -f $DEFCAT_PY ] ; then
        echo "Cataloging default inputs and parameters with '$DEFCAT_PY' ..." | tee -a $LOG
        cmd_opt_python load
        @PYBIN@ $DEFCAT_PY 2>&1 | tee -a $LOG
    else
        echo "Error: Missing file $DEFCAT_PY" | tee -a $LOG
        exit 1
    fi
}

### populate lifemapper DB with environmental scenario inputs for default users, no makeflow
PopulateScenariosForPublic () {
    if [ -f $SCENCAT_PY ] ; then
        echo "Cataloging env data $SCEN_PKG for user $PUBLIC_USER with '$SCENCAT_PY' ..." | tee -a $LOG
        cmd_opt_python load  
        @PYBIN@ $SCENCAT_PY  $PUBLIC_USER  $SCEN_PKG 2>&1 | tee -a $LOG
    else
        echo "Error: Missing file $SCENCAT_PY" | tee -a $LOG
        exit 1
    fi
}


### populate lifemapper DB with inputs for Global PAM and 
### a makeflow to begin computing the BOOM workflow
create_public_archive_workflow () {
    if [ -f $BOOMCAT_PY ] ; then
        echo "Catalog BOOM $BOOM_PARAMS inputs then insert a makeflow to create and run tasks with '$BOOMCAT_PY' ..." | tee -a $LOG
        cmd_opt_python load
        @PYBIN@ $BOOMCAT_PY  $BOOM_PARAMS 2>&1 | tee -a $LOG
    else
        echo "Error: Missing file $BOOMCAT_PY" | tee -a $LOG
        exit 1
    fi
}


fix_permissions () {
    /bin/egrep -i "^lmwriter" /etc/passwd
    if [ $? -ne 0 ]; then
        echo "Error: user lmwriter does not exist" | tee -a $LOG
        exit 1
    fi

    # This script is run by root, so set group write permission on data dir if default
    echo "Update lmwriter group permissions on $PUBLIC_USER_DATA_DIR" | tee -a $LOG
    /bin/chgrp -R lmwriter $PUBLIC_USER_DATA_DIR
    /bin/chmod -R g+ws     $PUBLIC_USER_DATA_DIR
}


### Main ###
if [ $# -gt 0 ]; then
    usage
    exit 0
fi 

set_defaults
TimeStamp "# Start"

populate_defaults

# includes scenarios
create_public_archive_workflow

fix_permissions
TimeStamp "# End"
