#!/bin/bash

# This script removes :
#    roll-installed RPMs, 
#    created directories
#    rocks host attributes
#    user accounts and groups : postgres, pgbouncer, solr, lmwriter

RM="rpm -evl --quiet --nodeps"
PIP3=/opt/python/bin/pip3.6
ROCKS_CMD=/opt/rocks/bin/rocks
LMUSER_COUNT=`/bin/egrep -i "^lmwriter" /etc/passwd  | wc -l`
LMROLL_COUNT=`$ROCKS_CMD list roll | grep lifemapper | wc -l`
LMLAB_ROLL_COUNT=`$ROCKS_CMD list roll | grep lifemapper-lab |  wc -l`
LMCOMPUTE_ROLL_COUNT = `$ROCKS_CMD list roll | grep lifemapper-compute |  wc -l`
NEED_SYNC = 0

TimeStamp () {
    echo $1 `/bin/date` >> $LOG
}

set_defaults() {
    THISNAME=`/bin/basename $0`
    LOG=/tmp/$THISNAME.log
    rm -f $LOG
    touch $LOG

    echo "-- enable modules"  | tee -a $LOG
    source /usr/share/Modules/init/bash
}

del-lifemapper-shared() {
    echo "Removing lifemapper RPMs shared" >> $LOG
    # for requests
    $RM opt-lifemapper-certifi
    $RM opt-lifemapper-chardet
    $RM opt-lifemapper-idna
    $RM opt-lifemapper-requests
    $RM opt-lifemapper-urllib3
    $RM opt-lifemapper-wheel

    module load opt-python
    $PYBIN@ -m pip uninstall -y wheel
    module unload opt-python

    if [ $LMLAB_ROLL_COUNT = 0 ] ; then
        echo "Removing lmlab/lmserver RPMs shared" >> $LOG
       $RM opt-lifemapper-cheroot
       $RM opt-lifemapper-cherrypy
       $RM opt-lifemapper-mod_wsgi
       $RM opt-lifemapper-portend
       $RM opt-lifemapper-pytz
       $RM opt-lifemapper-six
       $RM opt-lifemapper-tempora
       $RM opt-lifemapper-more-itertools
       $RM opt-lifemapper-contextlib2
       $RM opt-lifemapper-zc.lockfile
       $RM opt-lifemapper-backports.functools_lru_cache
       $RM opt-lifemapper-jaraco.functools
       $RM     lifemapper-solr
    fi

    if [ $LMCOMPUTE_ROLL_COUNT = 0 ] ; then
        echo "Removing lmcompute/lmserver RPMs shared" >> $LOG
        # gdal-libs + deps
        $RM gdal-libs
        $RM CharLS 
        $RM SuperLU 
        $RM armadillo
        $RM arpack
        $RM atlas atlas-devel
        $RM blas  blas-devel
        $RM cfitsio 
        $RM freexl 
        $RM geos geos-devel
        $RM hdf5 hdf5-devel
        $RM lapack lapack-devel
        $RM libaec libaec-devel
        $RM libdap 
        $RM libgeotiff libgeotiff-devel
        $RM libgta
        $RM libtiff-devel
        $RM netcdf 
        $RM ogdi 
        $RM openblas-openmp 
        $RM openjpeg2 
        $RM postgresql-libs
        $RM proj 
        $RM unixODBC 
        $RM xerces-c 
        # gdal deps
        $RM gpsbabel
        $RM libusb
        $RM shapelib
        
        echo "Removing lmcompute/lmserver shared lifemapper-* and opt-lifemapper-* RPMS" >> $LOG    
        $RM opt-lifemapper-biotaphypy
        $RM     lifemapper-cctools
        $RM opt-lifemapper-cython
        $RM opt-lifemapper-dendropy
        $RM     lifemapper-env-data
        $RM opt-lifemapper-gdal
        $RM opt-lifemapper-lmpy
        $RM opt-lifemapper-numpy
        $RM opt-lifemapper-matplotlib
        $RM     lifemapper-proj
        $RM opt-lifemapper-scipy
        $RM     lifemapper-tiff
        
        echo "Removing lmcompute/lmserver shared python wheels from opt-lifemapper-* RPMs" >> $LOG
        module load opt-python
        $PYBIN@ -m pip uninstall -y python-dateutil
        $PYBIN@ -m pip uninstall -y pyparsing
        $PYBIN@ -m pip uninstall -y kiwisolver
        $PYBIN@ -m pip uninstall -y cycler
        $PYBIN@ -m pip uninstall -y numpy
        $PYBIN@ -m pip uninstall -y scipy
        $PYBIN@ -m pip uninstall -y matplotlib
        module unload opt-python
    fi
}


del-shared-directories() {
   echo "Removing lifemapper installation directory" >> $LOG
   rm -rf @LMHOME@
   echo "Removing shared lifemapper temp and data directories" >> $LOG
   rm -rf @LMSCRATCHDISK@
   rm -rf @LMDISK@
   echo "Removing shared lifemapper PID directory" >> $LOG
   rm -rf /var/run/lifemapper
}

del-shared-user-group () {
    echo "Remove lmwriter user/group/dirs" >> $LOG
    /usr/bin/gpasswd -d apache lmwriter
    /usr/sbin/userdel lmwriter
    /usr/sbin/groupdel lmwriter
    /bin/rm -f /var/spool/mail/lmwriter
    /bin/rm -rf /export/home/lmwriter
    echo "Syncing users info" >> $LOG
    $ROCKS_CMD sync users
}


# stop Lifemapper daemons if running
stop-lm-daemons () {
    TRYAGAIN=0
    if [ -f /state/partition1/lmscratch/run/mattDaemon.pid ]; then
        echo "-- login as lmwriter to stop mattDaemon" >> $LOG
        TRYAGAIN=1
    fi

    if [ -f /state/partition1/lmscratch/run/daboom.pid ]; then
        echo "-- login as lmwriter to stop daboom daemon" >> $LOG
        TRYAGAIN=1
    fi

    if [ $TRYAGAIN = 1 ]; then
        exit
    fi
}

# stop services if running
stop-services () {
    PG=postgresql-@PGSQLVER@
    echo "-- stop $PG and pgbouncer daemons " >> $LOG
    
    if [ -f /var/run/pgbouncer/pgbouncer.pid ]; then
        /usr/bin/systemctl stop pgbouncer.service
    fi

    if [ -f /var/run/$PG.pid ] ; then
        /usr/bin/systemctl stop $PG
    fi

    SOLR_PROCESSES=`ps -Af | grep solr | grep -v "grep" | wc -l`
    if [[ $LMLAB_ROLL_COUNT = 0 ] && [ $SOLR_PROCESSES = 1 ]]; then
        echo "-- stop Solr process " >> $LOG
        # uses service instead of systemctl
        /usr/sbin/service solr stop
    fi
}

del-lifemapper() {
   echo "Removing lifemapper-* and prerequisite RPMS" >> $LOG
   $RM     lifemapper-cmd
   $RM     lifemapper-image-data
   $RM     lifemapper-libevent
   $RM     lifemapper-lmserver
   $RM opt-lifemapper-psycopg2
   $RM opt-lifemapper-pytest
   $RM     lifemapper-species-data
   $RM     lifemapper-webclient
   $RM rocks-lifemapper
   $RM roll-lifemapper-server-usersguide

   echo "Removing opt-* RPMS" >> $LOG
   $RM opt-lifemapper-idigbio
}

del-mapserver(){
   echo "Removing mapserver and dependencies RPMS" >> $LOG
   $RM opt-lifemapper-mapserver
   $RM bitstream-vera-sans-fonts
   $RM bitstream-vera-fonts-common
}

del-postgres() {
   echo "Removing postgis, postgres, pgbouncer and dependencies RPMS" >> $LOG
   $RM postgresql96 postgresql96-libs postgresql96-devel postgresql96-server postgresql96-contrib
   $RM postgis2_96
   $RM CGAL
   $RM SFCGAL SFCGAL-libs
   $RM boost-serialization
   $RM c-ares  c-ares-devel
   $RM postgresql10-libs
   $RM python2-psycopg2
   $RM pgbouncer
}

del-sysRPM() {
   echo "Removing pgdg repo" >> $LOG
   $RM pgdg-centos96
}

del-config () {
    echo "Removing system configuration files used by lifemapper" >> $LOG
    # Configured @UNIXSOCKET@ == /var/run/postgresql in version.mk constants
    rm -rf  /etc/ld.so.conf.d/lifemapper-server.conf
    rm -rf  /etc/logrotate.d/lifemapper-httpd
    rm -rf  /etc/profile.d/lifemapper.*
    rm -rf  /etc/sysctl.d/lifemapper.postgresd
    rm -f   /etc/systemd/system/httpd.service.d/lifemapper_umask.conf

    if [ $LMLAB_ROLL_COUNT = 0 ]; then
        rm -rf  /etc/security/limits.d/lifemapper.solr.conf
    fi
}

del-directories () {   
   echo "Removing  directories used by postgres and pgbouncer" >> $LOG
   # Configured @UNIXSOCKET@ == /var/run/postgresql in version.mk constants
   rm -rf /var/run/postgresql
   rm -rf /var/lib/pgsql
   rm -rf /etc/pgbouncer
   
   echo "Removing other dirs" >> $LOG
   rm -rf /state/partition1/lmscratch/log/apache
   rm -rf /state/partition1/lmscratch/sessions
   rm -rf /state/partition1/lmscratch/tmpUpload
   rm -rf /state/partition1/lmscratch/makeflow
   rm -rf /state/partition1/lm/data/archive
   
   echo "Removing data directories" >> $LOG
   rm -rf /state/partition1/lmserver

#    echo "Removing jcc installed by bootstrap" >> $LOG
#    rm -rf /opt/python/lib/python2.7/site-packages/jcc
#    rm -rf /opt/python/lib/python2.7/site-packages/libjcc.so 
#    rm -rf /opt/python/lib/python2.7/site-packages/JCC-2.18-py2.7.egg-info  
}

del-webstuff () {
   echo "Removing mapserver tmp directory" >> $LOG
   rm -rf /var/www/tmp

   echo "Removing symlinks" >> $LOG
   rm -rf /var/www/html/$LMCLIENT
   rm -rf /var/www/html/$DASHBOARD
   
   echo "Removing lifemapper web config" >> $LOG
   rm -f /etc/httpd/conf.d/lifemapper.conf
}

del-user-group () {
    # Deletes solr and lmwriter users and sets NEED_SYNC in del-shared-solr-stuff
    LMLAB_ROLL_COUNT=`$ROCKS_CMD list roll | grep lifemapper-lab |  wc -l`
    if [ $LMLAB_ROLL_COUNT = 0 ] ; then
        /bin/egrep -i "^solr" /etc/passwd
        if [ $? -eq 0 ]; then
            echo "Remove solr user" >> $LOG
            userdel solr
            /bin/rm -f /var/spool/mail/solr
            /bin/rm -rf /export/home/solr
            NEED_SYNC=1
        fi
    fi
    
    /bin/egrep -i "^pgbouncer" /etc/passwd
    if [ $? -eq 0 ]; then
        echo "Remove pgbouncer user" >> $LOG
        userdel pgbouncer
        /bin/rm -rf /export/home/pgbouncer
        NEED_SYNC=1
    fi
    
    /bin/egrep -i "^postgres" /etc/passwd
    if [ $? -eq 0 ]; then
        echo "Remove postgres user" >> $LOG
        userdel postgres
        NEED_SYNC=1
    fi
    
    if [ "$NEED_SYNC" -eq "1" ]; then
        echo "Syncing users info" >> $LOG
        $ROCKS_CMD sync users
    fi
}

del-attr () {
   $ROCKS_CMD list host attr localhost | /bin/egrep -i LM_dbserver
   if [ $? -eq 0 ]; then
		echo "Remove attribute LM_dbserver" >> $LOG
   		$ROCKS_CMD remove host attr localhost LM_dbserver
   fi

   rocks list host attr localhost | /bin/egrep -i LM_webserver
   if [ $? -eq 0 ]; then
   	echo "Remove attribute LM_webserver" >> $LOG
   	$ROCKS_CMD remove host attr localhost LM_webserver
   fi
}

# remove obsolete Lifemapper cron jobs
del-cron-jobs () {
   rm -vf  /etc/cron.*/lmserver_*
   echo "Removed old cron jobs on frontend in /etc directories cron.d, cron.daily and cron.monthly ..."  >> $LOG
}

del-automount-entry () {
   if [ $LMROLL_COUNT = 1 ]; then
       cat /etc/auto.share  | grep -v "^lmserver " | grep -v "^lm " > /tmp/auto.share.nolmserver
       /bin/cp /tmp/auto.share.nolmserver /etc/auto.share
   else
       cat /etc/auto.share  | grep -v "^lmserver " > /tmp/auto.share.nolmserver
       /bin/cp /tmp/auto.share.nolmserver /etc/auto.share
   fi
}

finish-cleanup () {
    echo >> $LOG
    echo "Removing roll lifemapper-server" >> $LOG 
    $ROCKS_CMD remove roll lifemapper-server
    
    echo "Rebuilding the distro" >> $LOG
    module unload opt-python
    (cd /export/rocks/install; $ROCKS_CMD create distro; yum clean all)
    echo >> $LOG
}


check-lm-processes () {
    LMUSER_PROCESSES=`ps -Alf | grep lmwriter | grep -v grep | wc -l`
    if [ $LMUSER_PROCESSES -ne 0 ]; then
        echo "Stop all lmwriter processes before running this script"
        exit 0
    fi 
}

### main ###

check-lm-processes

set_defaults
TimeStamp "# Start"

stop-lm-daemons
stop-services

del-postgres
del-mapserver 

del-opt-python 
del-lifemapper
del-sysRPM
del-directories
del-webstuff
del-attr
del-cron-jobs
del-automount-entry

if [ $LMROLL_COUNT = 1 ]; then
    del-shared-solr-stuff
	del-lifemapper-shared
	del-shared-directories
	del-shared-user-group
fi

finish-cleanup

TimeStamp "# End"
